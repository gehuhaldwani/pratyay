---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
}
import { Image } from "astro:assets";

function joinUrl(...parts: string[]): string {
	const joined = parts.join("/");
	return joined.replace(/\/+/g, "/");
}

function url(path: string) {
	return joinUrl("", import.meta.env.BASE_URL, path);
}

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
let image: ImageMetadata | undefined;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../**", {
		import: "default",
	});
	const normalizedPath = path
		.normalize(path.join("../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.log(normalizedPath);
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../", "src/")}`,
		);
	}
	image = await file();
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---

<div id={id} class:list={[className]}>
	<!-- <div
		class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"
	>
	</div> -->
	{
		isLocal && image && (
			<Image
				src={image}
				alt={alt || ""}
				class={imageClass}
				style={imageStyle}
			/>
		)
	}
	{
		!isLocal && (
			<img
				src={isPublic ? url(src) : src}
				alt={alt || ""}
				class={imageClass}
				style={imageStyle}
			/>
		)
	}
</div>
